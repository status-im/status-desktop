name: Android Build APK
run-name: Android Build APK (${{ inputs.architecture || 'arm64' }} testmode=${{ inputs.testmode || 'false' }})

on:
  workflow_dispatch:
    inputs:
      architecture:
        description: 'Target architecture'
        required: false
        default: 'arm64'
        type: choice
        options:
          - 'arm64'
          - 'x86_64'
          - 'arm'
          - 'x86'
      testmode:
        description: 'Enable QML test hooks (STATUSQ_TESTMODE)'
        required: false
        default: 'false'
        type: choice
        options:
          - 'false'
          - 'true'
      qt_version:
        description: 'Qt version (dependant on docker image)'
        required: false
        default: '6.9.2'
        type: string
      verbosity:
        description: 'Build verbosity level (0â€“3)'
        required: false
        default: '2'
        type: choice
        options:
          - '0'
          - '1'
          - '2'
          - '3'
      

jobs:
  android-build:
    runs-on: ubuntu-latest
    name: Build Android APK
    container:
      image: harbor.status.im/status-im/status-desktop-build:1.0.5-qt6.9.2-android
      options: --user jenkins
    env:
      USE_SYSTEM_NIM: 1
      GOCACHE: /tmp/go-cache
      GOMODCACHE: /tmp/go-mod-cache
      GOTMPDIR: /tmp
      QT_VERSION: ${{ inputs.qt_version }}

    steps:
      - name: Checkout repository with full history and submodules
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - name: Clean workspace if retrying job
        if: ${{ github.run_attempt > 1 }}
        run: |
          git reset --hard
          git clean -xfd

      - name: Setup environment
        shell: bash
        run: |
          set -e
          case "${{ inputs.architecture }}" in
            arm64)
              QT_ANDROID_PATH="/opt/qt/${{ inputs.qt_version }}/android_arm64_v8a"
              ANDROID_ABI="arm64-v8a"
              ;;
            arm)
              QT_ANDROID_PATH="/opt/qt/${{ inputs.qt_version }}/android_armv7"
              ANDROID_ABI="armeabi-v7a"
              ;;
            x86_64)
              QT_ANDROID_PATH="/opt/qt/${{ inputs.qt_version }}/android_x86_64"
              ANDROID_ABI="x86_64"
              ;;
            x86)
              QT_ANDROID_PATH="/opt/qt/${{ inputs.qt_version }}/android_x86"
              ANDROID_ABI="x86"
              ;;
            *)
              echo "Unknown architecture: ${{ inputs.architecture }}" >&2
              exit 1
              ;;
          esac

          echo "QT_ANDROID_PATH=$QT_ANDROID_PATH" >> $GITHUB_ENV
          echo "ANDROID_ABI=$ANDROID_ABI" >> $GITHUB_ENV
          echo "TESTMODE=${{ inputs.testmode }}" >> $GITHUB_ENV
          echo "ARCH=${{ inputs.architecture }}" >> $GITHUB_ENV

          echo "PKG_CONFIG_PATH=$QT_ANDROID_PATH/lib/pkgconfig" >> $GITHUB_ENV
          echo "QMAKE=$QT_ANDROID_PATH/bin/qmake" >> $GITHUB_ENV

          echo "$QT_ANDROID_PATH/bin" >> $GITHUB_PATH
          echo "/opt/android-sdk/emulator" >> $GITHUB_PATH
          echo "/opt/android-sdk/tools" >> $GITHUB_PATH
          echo "/opt/android-sdk/tools/bin" >> $GITHUB_PATH
          echo "/opt/android-sdk/platform-tools" >> $GITHUB_PATH

          if command -v javac >/dev/null 2>&1; then
            JAVA_HOME_PATH=$(dirname "$(dirname "$(readlink -f "$(command -v javac)")")")
            echo "JAVA_HOME=$JAVA_HOME_PATH" >> $GITHUB_ENV
            echo "$JAVA_HOME_PATH/bin" >> $GITHUB_PATH
          fi

          echo "QT_ANDROID_PATH=$QT_ANDROID_PATH"
          echo "QMAKE path should be: $QT_ANDROID_PATH/bin/qmake"
          ls -l "$QT_ANDROID_PATH/bin/qmake" || echo "qmake not found, check Qt image."

      - name: Fetch submodules
        run: git submodule update --init --recursive --force

      - name: Build Android APK
        shell: bash
        run: |
          set -e
          unset GOARCH
          echo "Using QMAKE: $QMAKE"
          echo "STATUSQ_TESTMODE: $TESTMODE"
          make mobile-clean
          make mobile-build \
            V=${{ inputs.verbosity }} \
            USE_SYSTEM_NIM=1 \
            STATUSQ_TESTMODE=${{ env.TESTMODE }} \
            -j$(nproc)

      - name: Rename APK with version
        id: version
        run: |
          set -e
          VERSION=$(./scripts/version.sh)
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "Determined version: $VERSION"
          
          SRC_APK="mobile/bin/android/qt6/Status.apk"
          DEST_APK="mobile/bin/android/qt6/Status-android-${{ inputs.architecture }}-${VERSION}.apk"

          if [ ! -f "$SRC_APK" ]; then
            echo "Expected APK not found at $SRC_APK" >&2
            exit 1
          fi

          cp "$SRC_APK" "$DEST_APK"
          echo "Renamed APK: $DEST_APK"
          echo "apk_path=$DEST_APK" >> $GITHUB_OUTPUT

      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: Status-android-${{ inputs.architecture }}-${{ env.VERSION }}
          path: ${{ steps.version.outputs.apk_path }}

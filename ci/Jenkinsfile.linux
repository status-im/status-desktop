library 'status-jenkins-lib@v1.7.1'

/* Options section can't access functions in objects. */
def isPRBuild = utils.isPRBuild()

pipeline {
  agent {
    /* Necessary image with Ubuntu 20.04 for older Glibc. */
    docker {
      label 'linux'
      image 'statusteam/nim-status-client-build:1.3.0-qt5.15.2'
      /* allows jenkins use cat and mounts '/dev/fuse' for linuxdeployqt */
      args '--entrypoint="" --cap-add SYS_ADMIN --security-opt apparmor:unconfined --device /dev/fuse'
    }
  }

  parameters {
    booleanParam(
      name: 'RELEASE',
      description: 'Decides whether binaries are built with debug symbols.',
      defaultValue: params.RELEASE ?: false
    )
    choice(
      name: 'VERBOSE',
      description: 'Level of verbosity based on nimbus-build-system setup.',
      choices: ['0', '1', '2']
    )
    string(
      name: 'NIMFLAGS',
      description: 'Extra Nim flags. Examples: --verbosity:2 --passL:"-v" --passC:"-v"',
      defaultValue: '--colors:off --debuginfo:on --stackTrace:on --lineTrace:on --stackTraceMsgs:on --excessiveStackTrace:on --verbosity:3 --passL:"-v" --passC:"-v" --parallelBuild:1 --listCmd --panics:on'
    )
  }

  options {
    timestamps()
    /* manage how many builds we keep */
    buildDiscarder(logRotator(
      numToKeepStr: '10',
      daysToKeepStr: '30',
      artifactNumToKeepStr: '3',
    ))
    /* Allows combined build to copy */
    copyArtifactPermission('/status-desktop/*')
    /* Abort old PR builds. */
    disableConcurrentBuilds(
      abortPrevious: isPRBuild
    )
  }

  environment {
    TARGET = "linux/${getArch()}"
    /* Improve make performance */
    MAKEFLAGS = "-j4 V=${params.VERBOSE}"
    /* Makefile assumes the compiler folder is included */
    QTDIR = "/opt/qt/5.15.2/gcc_64"
    PATH = "${env.QTDIR}/bin:${env.PATH}"
    /* Avoid weird bugs caused by stale cache. */
    QML_DISABLE_DISK_CACHE = "true"
    /* Control output the filename */
    STATUS_CLIENT_APPIMAGE = "pkg/${utils.pkgFilename(ext: 'AppImage', arch: getArch())}"
    STATUS_CLIENT_TARBALL = "pkg/${utils.pkgFilename(ext: 'tar.gz', arch: getArch())}"
  }

  stages {
    stage('Prep') {
      steps {
        sh "cp scripts/build.sh ${env.WORKSPACE_TMP}/"
        sh "ls -l ${env.WORKSPACE_TMP}/build.sh"
        sh "chmod +x ${env.WORKSPACE_TMP}/build.sh"
        sh "ls -l ${env.WORKSPACE_TMP}/build.sh"
      }
    }

    stage('Bisect') {
      steps { script {
        sh 'git bisect start'
        sh 'git bisect good "96a2310df09fa28866ce8573314c76c0cf7baf32"'
        sh 'git bisect bad  "2d21ff6c386f047ba574a9f196a630a058a7fdeb"'
        sh "git bisect run bash -c '${env.WORKSPACE_TMP}/build.sh'"
      } }
      post { always {
        sh 'git bisect log'
        sh 'git bisect visualize --stat'
        sh 'git bisect reset'
      } }
    }
  }
  post {
    success { script { github.notifyPR(true) } }
    failure { script { github.notifyPR(false) } }
    cleanup { sh './scripts/clean-git.sh' }
  }
}

def getArch() {
    def tokens = Thread.currentThread().getName().split('/')
    for (def arch in ['x86_64', 'aarch64']) {
      if (tokens.contains(arch)) { return arch }
    }
}

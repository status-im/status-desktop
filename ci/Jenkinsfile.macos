library 'status-jenkins-lib@v1.7.1'

/* Options section can't access functions in objects. */
def isPRBuild = utils.isPRBuild()

pipeline {
  /* This way we run the same Jenkinsfile on different platforms. */
  agent {
    label "${getAgentLabels().join(' && ')} && qt-5.15 && go-1.20"
  }

  parameters {
    booleanParam(
      name: 'RELEASE',
      description: 'Decides whether binaries are built with debug symbols.',
      defaultValue: params.RELEASE ?: false
    )
    choice(
      name: 'VERBOSE',
      description: 'Level of verbosity based on nimbus-build-system setup.',
      choices: ['0', '1', '2']
    )
    string(
      name: 'NIMFLAGS',
      description: 'Extra Nim flags. Examples: --verbosity:2 --passL:"-v" --passC:"-v"',
      defaultValue: '--colors:off'
    )
  }

  options {
    timestamps()
    /* Prevent Jenkins jobs from running forever */
    timeout(time: 30, unit: 'MINUTES')
    /* manage how many builds we keep */
    buildDiscarder(logRotator(
      numToKeepStr: '10',
      daysToKeepStr: '30',
      artifactNumToKeepStr: '3',
    ))
    /* Allows combined build to copy */
    copyArtifactPermission('/status-desktop/*')
    /* Abort old PR builds. */
    disableConcurrentBuilds(
      abortPrevious: isPRBuild
    )
  }

  environment {
    TARGET = "macos/${getArch()}"
    /* Improve make performance */
    MAKEFLAGS = "-j4 V=${params.VERBOSE}"
    /* WARNING: Qt 5.15.8 installed via Brew. */
    QTDIR = '/opt/homebrew/opt/qt@5'
    PATH = "${env.QTDIR}/bin:${env.PATH}"
    /* Avoid weird bugs caused by stale cache. */
    QML_DISABLE_DISK_CACHE = "true"
    /* Control output the filename */
    STATUS_CLIENT_DMG = "pkg/${utils.pkgFilename(ext: 'dmg', arch: getArch())}"
    /* Apple Team ID for Notarization */
    MACOS_NOTARIZE_TEAM_ID = "8B5X2M6H2Y"
  }

  stages {
    stage('Deps') {
      steps {
        sh 'make update'
        withCredentials([
          usernamePassword( /* For fetching HomeBrew bottles. */
            credentialsId: "status-im-auto-pkgs",
            usernameVariable: 'GITHUB_USER',
            passwordVariable: 'GITHUB_TOKEN'
          )
        ]) {
          sh 'make deps'
        }
      }
    }

    stage('status-go') {
      steps {
        sh 'make status-go'
      }
    }

    stage('Package') {
      steps { script {
        macos.bundle('pkg-macos')
      } }
    }

    stage('Notarize') {
      when { expression { utils.isReleaseBuild() } }
      steps { script {
        macos.notarize()
      } }
    }

    stage('Parallel Upload') {
      parallel {
        stage('Upload') {
          steps { script {
            env.PKG_URL = s3.uploadArtifact(env.STATUS_CLIENT_DMG)
            jenkins.setBuildDesc(Dmg: env.PKG_URL)
          } }
        }
        stage('Archive') {
          steps { script {
            archiveArtifacts(env.STATUS_CLIENT_DMG)
          } }
        }
      }
    }
  }
  post {
    success { script { github.notifyPR(true) } }
    failure { script { github.notifyPR(false) } }
    cleanup { sh './scripts/clean-git.sh' }
  }
}

/* This allows us to use one Jenkinsfile and run
 * jobs on different platforms based on job name. */
def getAgentLabels() {
    if (params.AGENT_LABEL) { return params.AGENT_LABEL }
    /* We extract the name of the job from currentThread because
     * before an agent is picket env is not available. */
    def tokens = Thread.currentThread().getName().split('/')
    def labels = []
    /* Check if the job path contains any of the valid labels. */
    ['linux', 'macos', 'x86_64', 'aarch64', 'arm64'].each {
        if (tokens.contains(it)) { labels.add(it) }
    }
    return labels
}

def getArch() {
    def tokens = Thread.currentThread().getName().split('/')
    for (def arch in ['x86_64', 'aarch64']) {
      if (tokens.contains(arch)) { return arch }
    }
}

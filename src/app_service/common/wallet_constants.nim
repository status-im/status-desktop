import tables

const
  IPFS_SCHEMA* = "ipfs://"
  IPFS_GATEWAY* = "https://gateway.pinata.cloud/ipfs/"

  ZERO_ADDRESS* = "0x0000000000000000000000000000000000000000"

  ETH_SYMBOL* = "ETH"
  BNB_SYMBOL* = "BNB"

  ETHEREUM_MAINNET* = 1
  ETHEREUM_SEPOLIA* = 11155111
  OPTIMISM_MAINNET* = 10
  OPTIMISM_SEPOLIA* = 11155420
  ARBITRUM_MAINNET* = 42161
  ARBITRUM_SEPOLIA* = 421614
  BSCMAINNET* = 56
  BSCTESTNET* = 97
  BASE_MAINNET* = 8453
  BASE_SEPOLIA* = 84532
  STATUS_NETWORK_SEPOLIA* = 1660990954

  ETH_TRANSACTION_TYPE* = "eth"
  ERC20_TRANSACTION_TYPE* = "erc20"
  ERC721_TRANSACTION_TYPE* = "erc721"

  SNT_CONTRACT_ADDRESS* = "0x744d70fdbe2ba4cf95131626614a1763df805b9e"
  STT_CONTRACT_ADDRESS_SEPOLIA* = "0xE452027cdEF746c7Cd3DB31CB700428b16cD8E51"

  SIGNATURE_LEN* = 130
  SIGNATURE_LEN_0X_INCLUDED* = SIGNATURE_LEN + 2

  TX_HASH_LEN* = 32 * 2
  TX_HASH_LEN_WITH_PREFIX* = TX_HASH_LEN + 2

  PROCESSOR_NAME_TRANSFER* = "Transfer"
  PROCESSOR_NAME_BRIDGE_HOP* = "Hop"
  PROCESSOR_NAME_BRIDGE_CELER* = "CBridge"
  PROCESSOR_NAME_SWAP_PARASWAP* = "Paraswap"
  PROCESSOR_NAME_ERC721* = "ERC721Transfer"
  PROCESSOR_NAME_ERC1155* = "ERC1155Transfer"
  PROCESSOR_NAME_ENS_REGISTER* = "ENSRegister"
  PROCESSOR_NAME_ENS_RELEASE* = "ENSRelease"
  PROCESSOR_NAME_ENS_PUBLIC_KEY* = "ENSPublicKey"
  PROCESSOR_NAME_STICKERS_BUY* = "StickersBuy"

  CHAINID_BSC_MAINNET* = 56
  CHAINID_BSC_TESTNET* = 97
  CHAINID_STATUS_NETWORK_SEPOLIA* = 1660990954

  STATUS_TOKEN_ADDRESSES*: Table[int, string] = {
    ETHEREUM_MAINNET: "0x744d70fdbe2ba4cf95131626614a1763df805b9e",
    OPTIMISM_MAINNET: "0x650af3c15af43dcb218406d30784416d64cfb6b2",
    ARBITRUM_MAINNET: "0x707f635951193ddafbb40971a0fcaab8a6415160",
    BASE_MAINNET: "0x662015ec830df08c0fc45896fab726542e8ac09e",
    ETHEREUM_SEPOLIA: "0xE452027cdEF746c7Cd3DB31CB700428b16cD8E51",
    BASE_SEPOLIA: "0xfdb3b57944943a7724fcc0520ee2b10659969a06",
    STATUS_NETWORK_SEPOLIA: "0x1c3ac2a186c6149ae7cb4d716ebbd0766e4f898a",
  }.toTable


proc nativeCurrencySymbol*(chainId: int): string =
  case chainId:
    of CHAINID_BSC_MAINNET, CHAINID_BSC_TESTNET:
      return BNB_SYMBOL
    else:
      return ETH_SYMBOL

proc statusTokenAddressForChainId*(chainId: int): string =
  return STATUS_TOKEN_ADDRESSES[chainId]

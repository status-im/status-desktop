import NimQml, json, stew/shims/strformat, sequtils, strutils, strutils
import options

import backend/collectibles_types as backend
import app_service/common/types
import app/modules/shared/wallet_utils

QtObject:
  type
    CollectionsDataEntry* = ref object of QObject
      id: backend.ContractID
      data: backend.Collection
      generatedId: string
      tokenType: TokenType

  proc setup(self: CollectionsDataEntry) =
    self.QObject.setup

  proc delete*(self: CollectionsDataEntry) =
    self.QObject.delete

  proc setData(self: CollectionsDataEntry, data: backend.Collection) =
    self.data = data
    self.setup()

  proc `$`*(self: CollectionsDataEntry): string =
    return fmt"""CollectionsDataEntry(
      id:{self.id},
      data:{self.data},
      generatedId:{self.generatedId},
      tokenType:{self.tokenType},
    )"""

  proc hasCollectionData(self: CollectionsDataEntry): bool =
    return self.data != nil and isSome(self.data.collectionData)

  proc getCollectionData(self: CollectionsDataEntry): backend.CollectionData =
    return self.data.collectionData.get()

  proc getChainID*(self: CollectionsDataEntry): int {.slot.} =
    return self.id.chainID

  QtProperty[int] chainId:
    read = getChainID

  proc getContractAddress*(self: CollectionsDataEntry): string {.slot.} =
    return self.id.address

  QtProperty[string] contractAddress:
    read = getContractAddress

  # Unique ID to identify collection, generated by us
  proc getID*(self: CollectionsDataEntry): backend.ContractID =
    return self.id

  proc getIDAsString*(self: CollectionsDataEntry): string =
    return self.generatedId

  proc nameChanged*(self: CollectionsDataEntry) {.signal.}
  proc getName*(self: CollectionsDataEntry): string {.slot.} =
    if self.hasCollectionData():
      result = self.getCollectionData().name
    if result == "":
      result = self.getIDAsString() 

  QtProperty[string] name:
    read = getName
    notify = nameChanged

  proc imageURLChanged*(self: CollectionsDataEntry) {.signal.}
  proc getImageURL*(self: CollectionsDataEntry): string {.slot.} =
    if not self.hasCollectionData():
      return ""
    return self.getCollectionData().imageUrl

  QtProperty[string] imageUrl:
    read = getImageURL
    notify = imageURLChanged

  proc slugChanged*(self: CollectionsDataEntry) {.signal.}
  proc getSlug*(self: CollectionsDataEntry): string {.slot.} =
    if not self.hasCollectionData():
      return ""
    return self.getCollectionData().slug

  QtProperty[string] collectionSlug:
    read = getCollectionSlug
    notify = collectionSlugChanged

  proc tokenTypeChanged*(self: CollectionsDataEntry) {.signal.}
  proc getTokenType*(self: CollectionsDataEntry): int {.slot.} =
   return self.tokenType.int

  QtProperty[int] tokenType:
    read = getTokenType
    notify = tokenTypeChanged

  proc communityIdChanged*(self: CollectionsDataEntry) {.signal.}
  proc getCommunityId*(self: CollectionsDataEntry): string {.slot.} =
    if not self.hasCollectionData():
      return ""
    return self.data.communityId

  QtProperty[string] communityId:
    read = getCommunityId
    notify = communityIdChanged

  proc updateDataIfSameID*(self: CollectionsDataEntry, update: backend.Collection): bool =
    if self.id != update.id:
      return false
    
    self.setData(update)

    # Notify changes for all properties
    self.nameChanged()
    self.slugChanged()
    self.imageUrlChanged()
    return true

  proc newCollectionsDataFullEntry*(data: backend.Collection): CollectionsDataEntry =
    new(result, delete)
    result.id = data.id
    result.setData(data)
    result.generatedId = result.id.toString()
    result.tokenType = contractTypeToTokenType(data.contractType)
    result.setup()

  proc newCollectionsDataBasicEntry*(id: backend.ContractID): CollectionsDataEntry =
    new(result, delete)
    result.id = id
    result.generatedId = result.id.toString()
    result.setup()

  proc newCollectionsDataEmptyEntry*(): CollectionsDataEntry =
    let id = backend.ContractID(
      chainID: 0,
      address: ""
    )
    return newCollectionsDataBasicEntry(id)


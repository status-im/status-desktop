import NimQml, json, stew/shims/strformat, sequtils, strutils, stint, strutils
import options

import backend/collectibles as backend
import collectible_trait_model
import app_service/common/types
import app/modules/shared/wallet_utils

# It is used to display a detailed collectibles entry in the QML UI
QtObject:
  type
    CollectiblesDataEntry* = ref object of QObject
      id: backend.CollectibleUniqueID
      data: backend.Collectible
      traits: TraitModel
      generatedId: string
      generatedCollectionId: string
      tokenType: TokenType

  proc setup(self: CollectiblesDataEntry) =
    self.QObject.setup

  proc delete*(self: CollectiblesDataEntry) =
    self.QObject.delete

  proc setData(self: CollectiblesDataEntry, data: backend.Collectible) =
    self.data = data
    self.traits = newTraitModel()
    if isSome(data.collectibleData) and isSome(data.collectibleData.get().traits):
      let traits = data.collectibleData.get().traits.get()
      self.traits.setItems(traits)
    self.setup()

  proc `$`*(self: CollectiblesDataEntry): string =
    return fmt"""CollectiblesDataEntry(
      id:{self.id},
      data:{self.data},
      traits:{self.traits},
      generatedId:{self.generatedId},
      generatedCollectionId:{self.generatedCollectionId},
      tokenType:{self.tokenType},
    )"""

  proc hasCollectibleData(self: CollectiblesDataEntry): bool =
    return self.data != nil and isSome(self.data.collectibleData)

  proc getCollectibleData(self: CollectiblesDataEntry): backend.CollectibleData =
    return self.data.collectibleData.get()

  proc getChainID*(self: CollectiblesDataEntry): int {.slot.} =
    return self.id.contractID.chainID

  QtProperty[int] chainId:
    read = getChainID

  proc getContractAddress*(self: CollectiblesDataEntry): string {.slot.} =
    return self.id.contractID.address

  QtProperty[string] contractAddress:
    read = getContractAddress

  proc getTokenID*(self: CollectiblesDataEntry): UInt256 =
    return self.id.tokenID

  proc getTokenIDAsString*(self: CollectiblesDataEntry): string {.slot.} =
    return self.getTokenID().toString()

  QtProperty[string] tokenId:
    read = getTokenIDAsString

  # Unique ID to identify collectible, generated by us
  proc getID*(self: CollectiblesDataEntry): backend.CollectibleUniqueID =
    return self.id

  proc getIDAsString*(self: CollectiblesDataEntry): string =
    return self.generatedId

  # Unique ID to identify collection, generated by us
  proc getCollectionID*(self: CollectiblesDataEntry): backend.ContractID =
    return self.id.contractID

  proc getCollectionIDAsString*(self: CollectiblesDataEntry): string =
    return self.generatedCollectionId

  proc nameChanged*(self: CollectiblesDataEntry) {.signal.}
  proc getName*(self: CollectiblesDataEntry): string {.slot.} =
    if self.hasCollectibleData():
      result = self.data.collectibleData.get().name
    if result == "":
      result = "#" & self.getTokenIDAsString() 

  QtProperty[string] name:
    read = getName
    notify = nameChanged

  proc imageURLChanged*(self: CollectiblesDataEntry) {.signal.}
  proc getImageURL*(self: CollectiblesDataEntry): string {.slot.} =
    if not self.hasCollectibleData() or isNone(self.getCollectibleData().imageUrl):
      return ""
    return self.getCollectibleData().imageUrl.get()

  QtProperty[string] imageUrl:
    read = getImageURL
    notify = imageURLChanged

  proc getOriginalMediaURL(self: CollectiblesDataEntry): string =
    if not self.hasCollectibleData() or isNone(self.getCollectibleData().animationUrl):
      return ""
    return self.getCollectibleData().animationUrl.get()

  proc mediaURLChanged*(self: CollectiblesDataEntry) {.signal.}
  proc getMediaURL*(self: CollectiblesDataEntry): string {.slot.} =
    result = self.getOriginalMediaURL()
    if result == "":
      result = self.getImageURL()

  QtProperty[string] mediaUrl:
    read = getMediaURL
    notify = mediaURLChanged

  proc getOriginalMediaType(self: CollectiblesDataEntry): string =
    if not self.hasCollectibleData() or isNone(self.getCollectibleData().animationMediaType):
      return ""
    return self.getCollectibleData().animationMediaType.get()

  proc mediaTypeChanged*(self: CollectiblesDataEntry) {.signal.}
  proc getMediaType*(self: CollectiblesDataEntry): string {.slot.} =
    result = self.getOriginalMediaType()
    if result == "":
      result = "image"

  QtProperty[string] mediaType:
    read = getMediaType
    notify = mediaTypeChanged

  proc backgroundColorChanged*(self: CollectiblesDataEntry) {.signal.}
  proc getBackgroundColor*(self: CollectiblesDataEntry): string {.slot.} =
    var color = "transparent"
    if self.hasCollectibleData() and isSome(self.getCollectibleData().backgroundColor):
      let backgroundColor = self.getCollectibleData().backgroundColor.get()
      if backgroundColor != "":
        color = "#" & backgroundColor
    return color

  QtProperty[string] backgroundColor:
    read = getBackgroundColor
    notify = backgroundColorChanged

  proc descriptionChanged*(self: CollectiblesDataEntry) {.signal.}
  proc getDescription*(self: CollectiblesDataEntry): string {.slot.} =
    if not self.hasCollectibleData() or isNone(self.getCollectibleData().description):
      return ""
    return self.getCollectibleData().description.get()

  QtProperty[string] description:
    read = getDescription
    notify = descriptionChanged

  proc traitsChanged*(self: CollectiblesDataEntry) {.signal.}
  proc getTraits*(self: CollectiblesDataEntry): QVariant {.slot.} =
    return newQVariant(self.traits)

  QtProperty[QVariant] traits:
    read = getTraits
    notify = traitsChanged

  proc tokenTypeChanged*(self: CollectiblesDataEntry) {.signal.}
  proc getTokenType*(self: CollectiblesDataEntry): int {.slot.} =
   return self.tokenType.int

  QtProperty[int] tokenType:
    read = getTokenType
    notify = tokenTypeChanged

  proc updateDataIfSameID*(self: CollectiblesDataEntry, update: backend.Collectible): bool =
    if self.id != update.id:
      return false
    
    self.setData(update)

    # Notify changes for all properties
    self.nameChanged()
    self.imageUrlChanged()
    self.mediaUrlChanged()
    self.mediaTypeChanged()
    self.backgroundColorChanged()
    self.descriptionChanged()
    self.traitsChanged()
    return true

  proc newCollectiblesDataFullEntry*(data: backend.Collectible): CollectiblesDataEntry =
    new(result, delete)
    result.id = data.id
    result.setData(data)
    result.generatedId = result.id.toString()
    result.generatedCollectionId = result.id.contractID.toString()
    result.tokenType = contractTypeToTokenType(data.contractType.get())
    result.setup()

  proc newCollectiblesDataBasicEntry*(id: backend.CollectibleUniqueID): CollectiblesDataEntry =
    new(result, delete)
    result.id = id
    result.traits = newTraitModel()
    result.generatedId = result.id.toString()
    result.generatedCollectionId = result.id.contractID.toString()
    result.setup()

  proc newCollectiblesDataEmptyEntry*(): CollectiblesDataEntry =
    let id = backend.CollectibleUniqueID(
      contractID: backend.ContractID(
        chainID: 0,
        address: ""
      ),
      tokenID: stint.u256(0)
    )
    return newCollectiblesDataBasicEntry(id)
